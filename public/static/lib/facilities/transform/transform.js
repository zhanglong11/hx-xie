const{DockingPanel:DockingPanel}=Bimfish.Viewing.UI;let id=0;import"./transform.css";let that=null;export class TransformPanel extends DockingPanel{constructor(t,e,n){super(t.container,t.container.id+`-${id++}`,e,n),this.selection=null,this.model=null,this.viewer=t,that=this,console.log(t),console.log("初始化"),this.container.style.height="300px",this.container.style.width="300px",this.container.style.resize="",this.container.style.left="10px",this.container.style.top="10px";let a=this.creatInput();this.container.appendChild($(a)[0]),this.inputChange(),this.createScrollContainer(n),this.scrollContainer.style.height="calc(100% - 105px)",this.footerInstance.resizeCallback=()=>{console.log("底部移动")}}creatInput(){return $('\n      <div class=\'model-transformer\'>\n        <div class=\'row\'>\n          <span>Translation：</span>\n          <input class="input-trans" data-key=\'Tx\' placeholder="x"/>\n          <input class="input-trans" data-key=\'Ty\' placeholder="y"/>\n          <input class="input-trans" data-key=\'Tz\' placeholder="z"/>\n        </div>\n        <div class=\'row\'>\n          <span>Rotation：</span>\n          <input class="input-trans" data-key=\'Rx\' placeholder="rx"/>\n          <input class="input-trans" data-key=\'Ry\' placeholder="ry"/>\n          <input class="input-trans" data-key=\'Rz\' placeholder="rz"/>\n        </div>\n        <div class=\'row\'>\n          <span>Scale：</span>\n          <input class="input-trans" data-key=\'Sx\' placeholder="sx"/>\n          <input class="input-trans" data-key=\'Sy\' placeholder="sy"/>\n          <input class="input-trans" data-key=\'Sz\' placeholder="sz"/>\n        </div>\n      </div>\n      ')}inputChange(){$(".input-trans").on("input",t=>{let e=$(t.target).data("key");this.onInputChanged(t,e)})}onSelectionChanged(t){console.log("监听"),that.clearTransformState();const e=t.selections.length?t.selections[0]:null;that.selection=e,console.log(that.selection),that.model=t.selections.length?t.selections[0].model:that.viewer.model}clearTransformState(){console.log("清空"),$(".input-trans").each((function(){this.value=""}))}getFragmentTransform(t,e){const n=this.viewer.impl.getFragmentProxy(e,t);n.getAnimTransform();const a=new THREE.Quaternion(n.quaternion._x,n.quaternion._y,n.quaternion._z,n.quaternion._w);console.log(n.quaternion._w);const o=new THREE.Euler;return o.setFromQuaternion(a,"XYZ"),{translation:{x:n.position.x,y:n.position.y,z:n.position.z},rotation:{x:o.x,y:o.y,z:o.z},scale:{x:n.scale.x,y:n.scale.y,z:n.scale.z}}}getTransform(){let t=this.viewer.getAggregateSelection();console.log(t);let e=t[0],n=e.model.getFragmentList().fragments.fragId2dbId,a=e.selection[0],o=[];for(let t in n)n[t]===a&&o.push(t.toString());this.selection={fragIdsArray:o,model:e.model,dbIdArray:e.selection};const s=this.viewer.impl.getFragmentProxy(e.model,o);s.getAnimTransform();const i=new THREE.Quaternion(s.quaternion._x,s.quaternion._y,s.quaternion._z,s.quaternion._w),r=new THREE.Euler;return r.setFromQuaternion(i,"XYZ"),{translation:{x:s.position.x,y:s.position.y,z:s.position.z},rotation:{x:r.x,y:r.y,z:r.z},scale:{x:s.scale.x,y:s.scale.y,z:s.scale.z}}}getTargetTransform(){return this.selection?this.getFragmentTransform(this.selection.fragIdsArray[0],this.selection.model):this.getTransform()}toFloat(t){const e=parseFloat(t);return isNaN(e)?0:e}async onInputChanged(t,e){console.log(this.viewer),console.log(t),console.log(e);const n=this.getTargetTransform(),a=t.target.value;switch(e){case"Tx":n.translation.x=this.toFloat(a);break;case"Ty":n.translation.y=this.toFloat(a);break;case"Tz":n.translation.z=this.toFloat(a);break;case"Rx":n.rotation.x=this.toFloat(a)*Math.PI/180;break;case"Ry":n.rotation.y=this.toFloat(a)*Math.PI/180;break;case"Rz":n.rotation.z=this.toFloat(a)*Math.PI/180;break;case"Sx":n.scale.x=this.toFloat(a),n.scale.y=this.toFloat(a),n.scale.z=this.toFloat(a);break;case"Sy":n.scale.y=this.toFloat(a);break;case"Sz":n.scale.z=this.toFloat(a)}this.applyTransform(n),this.viewer.impl.sceneUpdated(!0)}applyTransform(t,e={scale:{x:0,y:0,z:0},translation:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0}}){const n=new THREE.Euler(t.rotation.x+e.rotation.x,t.rotation.y+e.rotation.y,t.rotation.z+e.rotation.z,"XYZ"),a=new THREE.Quaternion;a.setFromEuler(n);const o={position:t.translation,scale:t.scale,quaternion:a};let s=this.selection.model;this.selection.fragIdsArray.forEach(t=>{this.transformFragProxy(s,Number(t),o)})}transformFragProxy(t,e,n){const a=this.viewer.impl.getFragmentProxy(t,e);a.getAnimTransform(),n.position&&(a.position=n.position),n.scale&&(a.scale=n.scale),n.quaternion&&(a.quaternion._x=n.quaternion.x,a.quaternion._y=n.quaternion.y,a.quaternion._z=n.quaternion.z,a.quaternion._w=n.quaternion.w),a.updateAnimTransform()}setVisible(t){super.setVisible(t)}onViewerResize(t,e,n,a,o,s){return super.onViewerResize(t,e,n,a,o,s),console.log("resizeDone"),!0}}